package cyberknightsLib;

/**
 * Changes:
 * <br> - comments
 * 
 * @version 1.3
 * @author caleb
 */
public abstract class DefaultMotor {
	
	// TODO: make variables private
	protected boolean motorPair = false;
	protected boolean motorTriplet = false;
	
	// motor constant
	protected boolean motorInverted;
	
	// limits
//	protected double upLimit;
//	protected double lowLimit;
	protected double speedLimit;
	
	protected boolean limitedSpeed = false;
	
//	private CANTalon.FeedbackDevice sensor = CANTalon.FeedbackDevice.QuadEncoder;
	
	// misc
	protected String description; // Description for the motor(s) purpose. Ex. use
								  // in a subsystem.
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	 * Constructors
	 */
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	* Moving and stopping
	*/
	
	public abstract void setSpeed(double speed);

	public void stop() {
		setSpeed(0);
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	* Closedloop
	*/
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	 * Sensors
	 */
	
	public abstract void zeroEncPos();
	
	public abstract int getSensorPos();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	* Limits
	*/
	
	// TODO: javadoc for methods
//	public void setSoftLimits(WPI_TalonSRX talon) {
//		talon.setForwardSoftLimit(upLimit);
//		talon.setReverseSoftLimit(lowLimit);
//	}
//	
//	public void setSoftLimits(CANTalon talon, double upLimit, double lowLimit) {
//		talon.setForwardSoftLimit(upLimit);
//		talon.setReverseSoftLimit(lowLimit);
//	}
//	
//	public void enableSoftLimits(CANTalon talon, boolean onOff) {
//		talon.enableForwardSoftLimit(onOff);
//		talon.enableReverseSoftLimit(onOff);
//	}
	
	public void setSpeedLimit(double speedLimit) {
		this.speedLimit = speedLimit;
	}
	
	public void enableSpeedLimit(boolean onOff) {
		limitedSpeed = onOff;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	* Single Talon dependent methods
	*/
	
	// TODO: javadoc for abstract methods
//	public abstract double getEncPos();
	
//	public abstract double getEncVelocity();
	
	public abstract double getTalonSpeed();
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	 * Talon pair supported methods
	 */
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	 * Talon triplet supported methods
	 */

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	 * Get the Talon references
	 */
	
	// TODO: getTalon()
//			return l_Talon;

	// TODO: getFollowerTalon0()
//			if (m_Pair || m_Triplet)
//				return f_Talon0;
//			else
//				return null;
	
	// TODO: getFollowerTalon1()
//			if (m_Triplet)
//				return f_Talon1;
//			else 
//				return null;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	* //
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/*
	 * Get variables from DefaultMotor object
	 */
	
	public String getDescription() {
		return description;
	}
	
	public double getSpeedLimit() {
		return speedLimit;
	}
	
	public boolean hasFollower() {
		return motorPair || motorTriplet;
	}
	
	public boolean limitedSpeed() {
		return limitedSpeed;
	}
}
